# -*- coding: utf-8 -*-
"""Junaid_13_customization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jt0yyRsExDCuqXNL3pl-mPrs-17lrKoL

# Lying with Data

In some cases, the default settings in Plotly visualizations may create a situation where the visualization is "lying" to the viewer/user. In this exercise, we'll explore a few different ways to customize your visualizations to keep that from happening.

<font color='darkred'>As usual, please install dash before running this notebook.</font>
"""

!pip install dash

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import dash
from dash import Dash, html, dcc, Input, Output, callback

"""# Exercises

First, load in your data in pandas as you usually would.

<font color='darkred'>**Again, your grade for this exercise will come from the app cell at the bottom of this notebook.**</font>
"""

# read your data in here as usual
url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQVLBXrBtK-h6tDVWrEXv2i7v1EomI1WpUW5JZhZ0H6vEIXznvXYyjj3QgW0zdR0ssbb021j52bkDmY/pub?gid=28498672&single=true&output=csv'

# data is stored in pandas as a DataFrame
telecom_data = pd.read_csv(url)

telecom_data = telecom_data.sample(n=800, random_state=42)

# the top of the data frame is the "head"
telecom_data.head()

"""## EXERCISE 1

1. Ask any interesting question which can be addressed with a visualization of your data. Share the question in your web app, and format the text as you like!
2. Build a "default" visualization which attempts to address this question using **one line** of Plotly Express code. Try to keep the code as simple and "default-y" as possible. Save the visualization as a `fig_...` object, and place it in the web app. Add a label/title for this visualization which indicates it is the "Default" visualization.
3. Add some text *beneath* this visualization that points out at least 3 problems with the default visualization, and why it might be seen as "lying" to the viewer.

Question:

How does age impact customer churn?

I’m using this question to explore if there is any clear trend between the age of customers and whether they churned or not.

Steps:

  * I’ll create a simple default scatter plot showing age against churn categories using Plotly Express.

  * I’ll then display three key issues with the visualization that might mislead viewers.
"""

# use code cells to test code if you like
# Default scatter plot visualization
fig_default = px.scatter(
    telecom_data,
    x='Age',
    y='Churn Category',
    color='Churn Category',
    title="Default Visualization: Age vs Churn Category"
)

# Show the default visualization
fig_default.show()

"""Explanation for EXERCISE 1:

  Visualization: The default scatter plot maps age (on the x-axis) against churn categories (on the y-axis). This is a straightforward attempt to visualize how churn behavior might differ across age groups.

  Problems with Default Visualization:

  * Missing Labels: The x and y axes are not labeled, making it difficult for users to understand what is being visualized.

  * Unclear Tick Marks: The default tick marks don’t allow users to interpret age values easily, as they are too few and undefined.
        
  * Cluttered Hover Text: The hover text doesn't provide clear insights into customer churn for each age group and looks messy.

## EXERCISE 2

1. Copy/Paste the visualization into a new `fig_...` object to improve on. *Note: The final web app for this exercise will have two visualizations: the default one and the improved one.*
2. Update the [tick marks](https://plotly.com/python/tick-formatting/) for your x or y axis (or both), and adjust the text formatting where appropriate. If you are using a non-axes visualization (e.g., choropleth), you can skip this step.
    - Refer to the [axes](https://plotly.com/python/axes/) documentation for Plotly, and make sure the axes in the visualization are as clear as possible. E.g., do you need a zeroline?
3. Adjust the hover text for your visualization. Try to make it informative for your question, but not too cluttered.
4. Use what you've learned so far in this class to make the necessary improvements to the visualization such that it is as clear as possible.
    - You may find yourself using Plotly documentation which was not covered in this class. That's okay!
5. Add some [shape-drawing buttons](https://plotly.com/python/configuration-options/#add-optional-shapedrawing-buttons-to-modebar) to your modebar, and remove any buttons you think are not needed.
6. Add some text beneath the new visualization which describes the visualization and discusses the takeaway message for the web app.

For Exercise 2, I’ll improve the default visualization by making the following changes:

  * Tick Mark Improvements: I’ll adjust the tick marks for better clarity.
    
  * Hover Text Customization: I’ll add more informative hover text that provides insights about each customer.
  * Axis Labeling and Formatting: I’ll add labels to the x and y axes and adjust the text size.
  * Modebar Options: I’ll add buttons to the modebar to allow the user to interact with the visualization more efficiently.
"""

# use code cells to test code if you like
# Enhanced scatter plot visualization with customizations
fig_enhanced = px.scatter(
    telecom_data,
    x='Age',
    y='Churn Category',
    color='Churn Category',
    labels={'Age': 'Customer Age', 'Churn Category': 'Churn Category'},
    hover_data=['Gender', 'Contract', 'Total Charges'],
    title='Enhanced Visualization: Age vs Churn Category (Advanced)'
).update_layout(
    xaxis_title="Age (in years)",
    yaxis_title="Churn Category",
    xaxis=dict(tickmode='linear', tick0=20, dtick=10),
    hoverlabel=dict(font_size=12, font_family="Arial"),
    showlegend=True,
    plot_bgcolor='#f9f9f9'
).update_traces(
    marker=dict(size=12, opacity=0.85, line=dict(width=1, color='DarkSlateGrey'))
).add_shape(
    # Adding a reference line at Age 60
    type="line", line_color="Red", line_width=3, opacity=0.7,
    x0=60, x1=60, y0=0, y1=1, xref="x", yref="paper",
    name="Reference Line (Age 60)"
).add_annotation(
    x=60, y=1, xref="x", yref="paper",
    text="Age 60 (Focus on Senior Customers)",
    showarrow=True, arrowhead=2, ax=40, ay=-80
).update_layout(
    modebar_add=['drawline', 'drawrect', 'eraseshape'],
    modebar_remove=['zoom2d', 'pan2d'],
    coloraxis_showscale=False
)

# Show the enhanced visualization
fig_enhanced.show()

"""Explanation for EXERCISE 2:

  Visualization Improvements:
  
  * Axes and Tick Marks: I’ve added clear axis labels, ensuring users know what the plot represents. I also adjusted the tick marks on the x-axis to increments of 10 for easier readability.
  * Hover Text Customization: Now, each point displays the customer's gender, contract type, and total charges, providing richer context.
  * Clear Markers: The size of the markers is increased, making each data point distinct and avoiding clutter.

Takeaway:

  * From the enhanced visualization, we can clearly observe how different age groups and churn categories interact. The added hover text helps users better understand individual customer profiles, and the improved tick marks and axis labels make the plot much more intuitive.

## DASH APP

---

<font color='darkblue'>**The cell below will be your "app cell".**</font>

- This is the cell that will be graded for this week's exercise.
- Any time you update code, re-run the cell to render changes in the app.
- Click the icon on the upper left corner of the output, and select "View output fullscreen". *Type **Esc** to return to the notebook.*
"""

# Step 2: Initialize the Dash app
app = dash.Dash(__name__)

# Step 3: Define the layout of the app with both visualizations
app.layout = html.Div([
    html.H1("Telecom Customer Churn Analysis", style={'textAlign': 'center', 'padding': '20px', 'color': '#003366'}),

    # Default Visualization (EXERCISE 1)
    html.H2("Default Visualization: Age vs Churn Category", style={'textAlign': 'center'}),
    dcc.Graph(
        id='default-graph',
        figure=fig_default  # Using the predefined default figure
    ),

    # Explanation for the default visualization
    html.Div([
        html.H3("Problems with Default Visualization:"),
        html.Ul([
            html.Li("The scatter plot lacks axis labels that clearly explain the data."),
            html.Li("The default tick marks are not well-defined, making it hard to interpret exact ages."),
            html.Li("The hover text is not informative, making the plot cluttered without clear insights.")
        ])
    ], style={'padding': '20px', 'border': '1px solid #ccc', 'margin': '20px'}),

    # Improved Visualization (EXERCISE 2)
    html.H2("Enhanced Visualization: Age vs Churn Category (Advanced)", style={'textAlign': 'center'}),
    dcc.Graph(
        id='improved-graph',
        figure=fig_enhanced  # Using the predefined enhanced figure
    ),

    # Explanation for the enhanced visualization
    html.Div([
        html.H3("Improvements in the Enhanced Visualization:"),
        html.Ul([
            html.Li("Added axis labels and a reference line at Age 60 to highlight older customers, which are key to churn analysis."),
            html.Li("Improved hover text now shows details such as Gender, Contract Type, and Total Charges, making it more informative."),
            html.Li("The marker sizes have been increased, and their opacity has been adjusted to prevent overlapping, making data points easier to distinguish."),
            html.Li("Aesthetic improvements with custom line width and color for the markers make the visualization clearer and more visually appealing."),
            html.Li("Added interactive shape-drawing tools to let users annotate or draw attention to certain areas in the plot.")
        ])
    ], style={'padding': '20px', 'border': '1px solid #ccc', 'margin': '20px'})
])

# Step 4: Run the app
if __name__ == '__main__':
    app.run(debug=True, jupyter_mode="inline", jupyter_height=2000)

"""*Note: If your cell output is stuck on "Loading ..." for more than a minute, you may need to reconnect/restart your Google Colab runtime.*

---
"""